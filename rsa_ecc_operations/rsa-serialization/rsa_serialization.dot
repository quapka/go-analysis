  "(*encoding/pem.lineBreaker).Write" -> "(*bytes.Buffer).Write"
  "(*encoding/pem.lineBreaker).Write" -> "(io/ioutil.devNull).Write"
  "(*encoding/pem.lineBreaker).Write" -> "(*fmt.pp).Write"
  "(*encoding/pem.lineBreaker).Write" -> "(*encoding/pem.lineBreaker).Write"
  "(*encoding/pem.lineBreaker).Write" -> "(*os.File).Write"
  "(*encoding/pem.lineBreaker).Write" -> "(*internal/poll.FD).Write"
  "(*encoding/pem.lineBreaker).Write" -> "(*bytes.Buffer).Write"
  "(*encoding/pem.lineBreaker).Write" -> "(io/ioutil.devNull).Write"
  "(*encoding/pem.lineBreaker).Write" -> "(*fmt.pp).Write"
  "(*encoding/pem.lineBreaker).Write" -> "(*encoding/pem.lineBreaker).Write"
  "(*encoding/pem.lineBreaker).Write" -> "(*os.File).Write"
  "(*encoding/pem.lineBreaker).Write" -> "(*internal/poll.FD).Write"
  "(*encoding/pem.lineBreaker).Write" -> "(*bytes.Buffer).Write"
  "(*encoding/pem.lineBreaker).Write" -> "(io/ioutil.devNull).Write"
  "(*encoding/pem.lineBreaker).Write" -> "(*fmt.pp).Write"
  "(*encoding/pem.lineBreaker).Write" -> "(*encoding/pem.lineBreaker).Write"
  "(*encoding/pem.lineBreaker).Write" -> "(*os.File).Write"
  "(*encoding/pem.lineBreaker).Write" -> "(*internal/poll.FD).Write"
  "(*encoding/pem.lineBreaker).Write" -> "(*encoding/pem.lineBreaker).Write"
  "(*encoding/base64.encoder).Write" -> "(*encoding/pem.lineBreaker).Write"
  "(*encoding/base64.encoder).Write" -> "(*encoding/pem.lineBreaker).Write"
  "(*encoding/pem.lineBreaker).Write" -> "(*encoding/base64.encoder).Write"
  "(*encoding/pem.lineBreaker).Write" -> "(*encoding/base64.encoder).Write"
  "(*encoding/pem.lineBreaker).Write" -> "(*encoding/base64.encoder).Write"
  "fmt.Fprintf" -> "(*encoding/pem.lineBreaker).Write"
  "fmt.Fprint" -> "(*encoding/pem.lineBreaker).Write"
  "io.WriteString" -> "(*encoding/pem.lineBreaker).Write"
  "encoding/pem.init" -> "bytes.init"
  "encoding/pem.init" -> "encoding/base64.init"
  "encoding/pem.init" -> "errors.init"
  "encoding/pem.init" -> "io.init"
  "encoding/pem.init" -> "sort.init"
  "encoding/pem.init" -> "strings.init"
  "crypto/x509.init" -> "encoding/pem.init"
  "crypto/x509.init" -> "errors.init"
  "crypto/x509.init" -> "runtime.init"
  "crypto/x509.init" -> "crypto/aes.init"
  "crypto/x509.init" -> "crypto/cipher.init"
  "crypto/x509.init" -> "crypto/des.init"
  "crypto/x509.init" -> "crypto/md5.init"
  "crypto/x509.init" -> "encoding/hex.init"
  "crypto/x509.init" -> "io.init"
  "crypto/x509.init" -> "strings.init"
  "crypto/rsa.init" -> "crypto.init"
  "crypto/rsa.init" -> "crypto/subtle.init"
  "crypto/rsa.init" -> "errors.init"
  "crypto/rsa.init" -> "io.init"
  "crypto/rsa.init" -> "math/big.init"
  "crypto/rsa.init" -> "crypto/internal/randutil.init"
  "crypto/rsa.init" -> "bytes.init"
  "crypto/rsa.init" -> "hash.init"
  "crypto/rsa.init" -> "crypto/rand.init"
  "crypto/rsa.init" -> "math.init"
  "crypto/rsa.init" -> "math/big.NewInt"
  "crypto/rsa.init" -> "math/big.NewInt"
  "crypto/rsa.init" -> "errors.New"
  "crypto/rsa.init" -> "errors.New"
  "crypto/rsa.init" -> "errors.New"
  "crypto/rsa.init" -> "errors.New"
  "crypto/rsa.init" -> "errors.New"
  "crypto/rsa.init" -> "errors.New"
  "crypto/x509.init" -> "crypto/rsa.init"
  "crypto/x509.init" -> "encoding/asn1.init"
  "crypto/x509.init" -> "math/big.init"
  "crypto/x509.init" -> "crypto/ecdsa.init"
  "crypto/x509/pkix.init" -> "encoding/asn1.init"
  "crypto/x509/pkix.init" -> "encoding/hex.init"
  "crypto/x509/pkix.init" -> "fmt.init"
  "crypto/x509/pkix.init" -> "math/big.init"
  "crypto/x509/pkix.init" -> "time.init"
  "crypto/x509.init" -> "crypto/x509/pkix.init"
  "crypto/x509.init" -> "fmt.init"
  "crypto/x509.init" -> "sync.init"
  "crypto/x509.init" -> "io/ioutil.init"
  "crypto/x509.init" -> "os.init"
  "crypto/x509.init" -> "crypto/elliptic.init"
  "crypto/x509.init" -> "bytes.init"
  "crypto/x509.init" -> "net.init"
  "crypto/x509.init" -> "net/url.init"
  "crypto/x509.init" -> "reflect.init"
  "crypto/x509.init" -> "time.init"
  "crypto/x509.init" -> "unicode/utf8.init"
  "crypto/x509.init" -> "crypto.init"
  "crypto/x509.init" -> "crypto/dsa.init"
  "crypto/x509.init" -> "crypto/sha1.init"
  "crypto/x509.init" -> "crypto/sha256.init"
  "crypto/x509.init" -> "crypto/sha512.init"
  "crypto/x509.init" -> "internal/x/crypto/cryptobyte.init"
  "crypto/x509.init" -> "internal/x/crypto/cryptobyte/asn1.init"
  "crypto/x509.init" -> "strconv.init"
  "crypto/x509.init" -> "errors.New"
  "crypto/x509.init" -> "os.Getenv"
  "crypto/x509.init" -> "strings.Contains"
  "crypto/x509.init" -> "errors.New"
  "crypto/x509.init" -> "errors.New"
  "(*bufio.Reader).writeBuf" -> "(*encoding/pem.lineBreaker).Write"
  "(*bytes.Buffer).WriteTo" -> "(*encoding/pem.lineBreaker).Write"
  "(*bytes.Reader).WriteTo" -> "(*encoding/pem.lineBreaker).Write"
  "crypto/rsa.GenerateMultiPrimeKey" -> "crypto/internal/randutil.MaybeReadByte"
  "crypto/rsa.GenerateMultiPrimeKey" -> "errors.New"
  "crypto/rsa.GenerateMultiPrimeKey" -> "math.Log"
  "crypto/rsa.GenerateMultiPrimeKey" -> "errors.New"
  "crypto/rsa.GenerateMultiPrimeKey" -> "crypto/rand.Prime"
  "crypto/rsa.GenerateMultiPrimeKey" -> "(*math/big.Int).BitLen"
  "crypto/rsa.GenerateMultiPrimeKey" -> "(*math/big.Int).Set"
  "crypto/rsa.GenerateMultiPrimeKey" -> "(*math/big.Int).Set"
  "crypto/rsa.GenerateMultiPrimeKey" -> "(*math/big.Int).Cmp"
  "crypto/rsa.GenerateMultiPrimeKey" -> "(*math/big.Int).Mul"
  "crypto/rsa.GenerateMultiPrimeKey" -> "(*math/big.Int).Sub"
  "crypto/rsa.GenerateMultiPrimeKey" -> "(*math/big.Int).Mul"
  "crypto/rsa.GenerateMultiPrimeKey" -> "(*math/big.Int).BitLen"
  "crypto/rsa.GenerateMultiPrimeKey" -> "math/big.NewInt"
  "crypto/rsa.GenerateMultiPrimeKey" -> "(*math/big.Int).ModInverse"
  "(*crypto/rsa.PrivateKey).Precompute" -> "(*math/big.Int).Sub"
  "(*crypto/rsa.PrivateKey).Precompute" -> "(*math/big.Int).Mod"
  "(*crypto/rsa.PrivateKey).Precompute" -> "(*math/big.Int).Sub"
  "(*crypto/rsa.PrivateKey).Precompute" -> "(*math/big.Int).Mod"
  "(*crypto/rsa.PrivateKey).Precompute" -> "(*math/big.Int).ModInverse"
  "(*crypto/rsa.PrivateKey).Precompute" -> "(*math/big.Int).Mul"
  "(*crypto/rsa.PrivateKey).Precompute" -> "(*math/big.Int).Sub"
  "(*crypto/rsa.PrivateKey).Precompute" -> "(*math/big.Int).Mod"
  "(*crypto/rsa.PrivateKey).Precompute" -> "(*math/big.Int).Set"
  "(*crypto/rsa.PrivateKey).Precompute" -> "(*math/big.Int).ModInverse"
  "(*crypto/rsa.PrivateKey).Precompute" -> "(*math/big.Int).Mul"
  "crypto/rsa.GenerateMultiPrimeKey" -> "(*crypto/rsa.PrivateKey).Precompute"
  "crypto/rsa.GenerateKey" -> "crypto/rsa.GenerateMultiPrimeKey"
  "github.com/quapka/go-analysis/rsa_ecc_operations/rsa-serialization.main" -> "crypto/rsa.GenerateKey"
  "crypto/x509.MarshalPKCS1PrivateKey" -> "(*crypto/rsa.PrivateKey).Precompute"
  "crypto/x509.MarshalPKCS1PrivateKey" -> "encoding/asn1.Marshal"
  "github.com/quapka/go-analysis/rsa_ecc_operations/rsa-serialization.main" -> "crypto/x509.MarshalPKCS1PrivateKey"
  "encoding/pem.Encode" -> "strings.Contains"
  "encoding/pem.Encode" -> "(*bytes.Buffer).Write"
  "encoding/pem.Encode" -> "(io/ioutil.devNull).Write"
  "encoding/pem.Encode" -> "(*fmt.pp).Write"
  "encoding/pem.Encode" -> "errors.New"
  "encoding/pem.Encode" -> "(*bytes.Buffer).Write"
  "encoding/pem.Encode" -> "(io/ioutil.devNull).Write"
  "encoding/pem.Encode" -> "(*fmt.pp).Write"
  "encoding/pem.Encode" -> "(*encoding/pem.lineBreaker).Write"
  "encoding/pem.Encode" -> "(*encoding/pem.lineBreaker).Write"
  "encoding/pem.Encode" -> "encoding/base64.NewEncoder"
  "encoding/pem.Encode" -> "(*encoding/pem.lineBreaker).Write"
  "encoding/pem.writeHeader" -> "(*bytes.Buffer).Write"
  "encoding/pem.writeHeader" -> "(io/ioutil.devNull).Write"
  "encoding/pem.writeHeader" -> "(*fmt.pp).Write"
  "encoding/pem.writeHeader" -> "(*encoding/pem.lineBreaker).Write"
  "encoding/pem.writeHeader" -> "(*os.File).Write"
  "encoding/pem.writeHeader" -> "(*internal/poll.FD).Write"
  "encoding/pem.writeHeader" -> "(*encoding/base64.encoder).Write"
  "encoding/pem.Encode" -> "encoding/pem.writeHeader"
  "encoding/pem.Encode" -> "sort.Strings"
  "encoding/pem.Encode" -> "encoding/pem.writeHeader"
  "encoding/pem.Encode" -> "(*bytes.Buffer).Write"
  "encoding/pem.Encode" -> "(io/ioutil.devNull).Write"
  "encoding/pem.Encode" -> "(*fmt.pp).Write"
  "encoding/pem.Encode" -> "(*encoding/pem.lineBreaker).Write"
  "(*encoding/pem.lineBreaker).Close" -> "(*bytes.Buffer).Write"
  "(*encoding/pem.lineBreaker).Close" -> "(io/ioutil.devNull).Write"
  "(*encoding/pem.lineBreaker).Close" -> "(*fmt.pp).Write"
  "(*encoding/pem.lineBreaker).Close" -> "(*encoding/pem.lineBreaker).Write"
  "(*encoding/pem.lineBreaker).Close" -> "(*os.File).Write"
  "(*encoding/pem.lineBreaker).Close" -> "(*internal/poll.FD).Write"
  "(*encoding/pem.lineBreaker).Close" -> "(*bytes.Buffer).Write"
  "(*encoding/pem.lineBreaker).Close" -> "(io/ioutil.devNull).Write"
  "(*encoding/pem.lineBreaker).Close" -> "(*fmt.pp).Write"
  "(*encoding/pem.lineBreaker).Close" -> "(*encoding/pem.lineBreaker).Write"
  "(*encoding/pem.lineBreaker).Close" -> "(*os.File).Write"
  "(*encoding/pem.lineBreaker).Close" -> "(*internal/poll.FD).Write"
  "(*encoding/pem.lineBreaker).Close" -> "(*encoding/base64.encoder).Write"
  "(*encoding/pem.lineBreaker).Close" -> "(*encoding/base64.encoder).Write"
  "encoding/pem.Encode" -> "(*encoding/pem.lineBreaker).Close"
  "encoding/pem.Encode" -> "(*encoding/pem.lineBreaker).Close"
  "encoding/pem.Encode" -> "(*bytes.Buffer).Write"
  "encoding/pem.Encode" -> "(io/ioutil.devNull).Write"
  "encoding/pem.Encode" -> "(*fmt.pp).Write"
  "encoding/pem.Encode" -> "(*encoding/pem.lineBreaker).Write"
  "encoding/pem.Encode" -> "(*bytes.Buffer).Write"
  "encoding/pem.Encode" -> "(io/ioutil.devNull).Write"
  "encoding/pem.Encode" -> "(*fmt.pp).Write"
  "encoding/pem.Encode" -> "(*encoding/pem.lineBreaker).Write"
  "encoding/pem.Encode" -> "(*os.File).Write"
  "encoding/pem.Encode" -> "(*os.File).Write"
  "encoding/pem.Encode" -> "(*os.File).Write"
  "encoding/pem.Encode" -> "(*os.File).Write"
  "encoding/pem.Encode" -> "(*os.File).Write"
  "encoding/pem.Encode" -> "(*os.File).Write"
  "encoding/pem.Encode" -> "(*os.File).Close"
  "encoding/pem.Encode" -> "(*internal/poll.FD).Write"
  "encoding/pem.Encode" -> "(*internal/poll.FD).Write"
  "encoding/pem.Encode" -> "(*internal/poll.FD).Write"
  "encoding/pem.Encode" -> "(*internal/poll.FD).Write"
  "encoding/pem.Encode" -> "(*internal/poll.FD).Write"
  "encoding/pem.Encode" -> "(*internal/poll.FD).Write"
  "encoding/pem.Encode" -> "(*internal/poll.FD).Close"
  "encoding/pem.Encode" -> "(*encoding/base64.encoder).Write"
  "encoding/pem.Encode" -> "(*encoding/base64.encoder).Write"
  "encoding/pem.Encode" -> "(*encoding/base64.encoder).Write"
  "encoding/pem.Encode" -> "(*encoding/base64.encoder).Write"
  "encoding/pem.Encode" -> "(*encoding/base64.encoder).Write"
  "encoding/pem.Encode" -> "(*encoding/base64.encoder).Write"
  "(*encoding/base64.encoder).Close" -> "(*encoding/pem.lineBreaker).Write"
  "encoding/pem.Encode" -> "(*encoding/base64.encoder).Close"
  "encoding/pem.EncodeToMemory" -> "encoding/pem.Encode"
  "encoding/pem.EncodeToMemory" -> "(*bytes.Buffer).Bytes"
  "github.com/quapka/go-analysis/rsa_ecc_operations/rsa-serialization.main" -> "encoding/pem.EncodeToMemory"
  "github.com/quapka/go-analysis/rsa_ecc_operations/rsa-serialization.init" -> "crypto/rsa.init"
  "github.com/quapka/go-analysis/rsa_ecc_operations/rsa-serialization.init" -> "crypto/x509.init"
  "github.com/quapka/go-analysis/rsa_ecc_operations/rsa-serialization.init" -> "encoding/pem.init"
