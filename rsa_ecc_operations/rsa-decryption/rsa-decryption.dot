digraph graphviz {
  "crypto/rsa.init" -> "crypto.init"
  "crypto/rsa.init" -> "crypto/subtle.init"
  "crypto/rsa.init" -> "errors.init"
  "crypto/rsa.init" -> "io.init"
  "crypto/rsa.init" -> "math/big.init"
  "crypto/rsa.init" -> "crypto/internal/randutil.init"
  "crypto/rsa.init" -> "bytes.init"
  "crypto/rsa.init" -> "hash.init"
  "crypto/rsa.init" -> "crypto/rand.init"
  "crypto/rsa.init" -> "math.init"
  "crypto/rsa.init" -> "math/big.NewInt"
  "crypto/rsa.init" -> "math/big.NewInt"
  "crypto/rsa.init" -> "errors.New"
  "crypto/rsa.init" -> "errors.New"
  "crypto/rsa.init" -> "errors.New"
  "crypto/rsa.init" -> "errors.New"
  "crypto/rsa.init" -> "errors.New"
  "crypto/rsa.init" -> "errors.New"
  "github.com/quapka/go-analysis/rsa_ecc_operations/rsa-decryption.init" -> "crypto/rsa.init"
  "(*crypto/rsa.PrivateKey).Precompute" -> "(*math/big.Int).Sub"
  "(*crypto/rsa.PrivateKey).Precompute" -> "(*math/big.Int).Mod"
  "(*crypto/rsa.PrivateKey).Precompute" -> "(*math/big.Int).Sub"
  "(*crypto/rsa.PrivateKey).Precompute" -> "(*math/big.Int).Mod"
  "(*crypto/rsa.PrivateKey).Precompute" -> "(*math/big.Int).ModInverse"
  "(*crypto/rsa.PrivateKey).Precompute" -> "(*math/big.Int).Mul"
  "(*crypto/rsa.PrivateKey).Precompute" -> "(*math/big.Int).Sub"
  "(*crypto/rsa.PrivateKey).Precompute" -> "(*math/big.Int).Mod"
  "(*crypto/rsa.PrivateKey).Precompute" -> "(*math/big.Int).Set"
  "(*crypto/rsa.PrivateKey).Precompute" -> "(*math/big.Int).ModInverse"
  "(*crypto/rsa.PrivateKey).Precompute" -> "(*math/big.Int).Mul"
  "crypto/rsa.decrypt" -> "(*math/big.Int).Cmp"
  "crypto/rsa.decrypt" -> "(*math/big.Int).Sign"
  "crypto/rsa.decrypt" -> "crypto/internal/randutil.MaybeReadByte"
  "crypto/rsa.decrypt" -> "crypto/rand.Int"
  "crypto/rsa.decrypt" -> "(*math/big.Int).Cmp"
  "crypto/rsa.decrypt" -> "(*math/big.Int).ModInverse"
  "crypto/rsa.decrypt" -> "math/big.NewInt"
  "crypto/rsa.decrypt" -> "(*math/big.Int).Exp"
  "crypto/rsa.decrypt" -> "(*math/big.Int).Set"
  "crypto/rsa.decrypt" -> "(*math/big.Int).Mul"
  "crypto/rsa.decrypt" -> "(*math/big.Int).Mod"
  "crypto/rsa.decrypt" -> "(*math/big.Int).Exp"
  "crypto/rsa.decrypt" -> "(*math/big.Int).Exp"
  "crypto/rsa.decrypt" -> "(*math/big.Int).Exp"
  "crypto/rsa.decrypt" -> "(*math/big.Int).Sub"
  "crypto/rsa.decrypt" -> "(*math/big.Int).Sign"
  "crypto/rsa.decrypt" -> "(*math/big.Int).Add"
  "crypto/rsa.decrypt" -> "(*math/big.Int).Mul"
  "crypto/rsa.decrypt" -> "(*math/big.Int).Mod"
  "crypto/rsa.decrypt" -> "(*math/big.Int).Mul"
  "crypto/rsa.decrypt" -> "(*math/big.Int).Add"
  "crypto/rsa.decrypt" -> "(*math/big.Int).Exp"
  "crypto/rsa.decrypt" -> "(*math/big.Int).Sub"
  "crypto/rsa.decrypt" -> "(*math/big.Int).Mul"
  "crypto/rsa.decrypt" -> "(*math/big.Int).Mod"
  "crypto/rsa.decrypt" -> "(*math/big.Int).Sign"
  "crypto/rsa.decrypt" -> "(*math/big.Int).Add"
  "crypto/rsa.decrypt" -> "(*math/big.Int).Mul"
  "crypto/rsa.decrypt" -> "(*math/big.Int).Add"
  "crypto/rsa.decrypt" -> "(*math/big.Int).Mul"
  "crypto/rsa.decrypt" -> "(*math/big.Int).Mod"
  "(*crypto/rsa.PublicKey).Size" -> "(*math/big.Int).BitLen"
  "crypto/rsa.decryptPKCS1v15" -> "(*crypto/rsa.PublicKey).Size"
  "crypto/rsa.decryptPKCS1v15" -> "(*math/big.Int).SetBytes"
  "crypto/rsa.decryptPKCS1v15" -> "crypto/rsa.decrypt"
  "crypto/rsa.decryptPKCS1v15" -> "(*math/big.Int).Bytes"
  "crypto/rsa.decryptPKCS1v15" -> "crypto/rsa.leftPad"
  "crypto/rsa.decryptPKCS1v15" -> "crypto/subtle.ConstantTimeByteEq"
  "crypto/rsa.decryptPKCS1v15" -> "crypto/subtle.ConstantTimeByteEq"
  "crypto/rsa.decryptPKCS1v15" -> "crypto/subtle.ConstantTimeByteEq"
  "crypto/rsa.decryptPKCS1v15" -> "crypto/subtle.ConstantTimeSelect"
  "crypto/rsa.decryptPKCS1v15" -> "crypto/subtle.ConstantTimeSelect"
  "crypto/rsa.decryptPKCS1v15" -> "crypto/subtle.ConstantTimeLessOrEq"
  "crypto/rsa.decryptPKCS1v15" -> "crypto/subtle.ConstantTimeSelect"
  "crypto/rsa.DecryptPKCS1v15SessionKey" -> "crypto/rsa.checkPub"
  "crypto/rsa.DecryptPKCS1v15SessionKey" -> "(*crypto/rsa.PublicKey).Size"
  "crypto/rsa.DecryptPKCS1v15SessionKey" -> "crypto/rsa.decryptPKCS1v15"
  "crypto/rsa.DecryptPKCS1v15SessionKey" -> "crypto/subtle.ConstantTimeEq"
  "crypto/rsa.DecryptPKCS1v15SessionKey" -> "crypto/subtle.ConstantTimeCopy"
  "github.com/quapka/go-analysis/rsa_ecc_operations/rsa-decryption.main" -> "encoding/hex.DecodeString"
  "crypto/rsa.GenerateMultiPrimeKey" -> "crypto/internal/randutil.MaybeReadByte"
  "crypto/rsa.GenerateMultiPrimeKey" -> "errors.New"
  "crypto/rsa.GenerateMultiPrimeKey" -> "math.Log"
  "crypto/rsa.GenerateMultiPrimeKey" -> "errors.New"
  "crypto/rsa.GenerateMultiPrimeKey" -> "crypto/rand.Prime"
  "crypto/rsa.GenerateMultiPrimeKey" -> "(*math/big.Int).BitLen"
  "crypto/rsa.GenerateMultiPrimeKey" -> "(*math/big.Int).Set"
  "crypto/rsa.GenerateMultiPrimeKey" -> "(*math/big.Int).Set"
  "crypto/rsa.GenerateMultiPrimeKey" -> "(*math/big.Int).Cmp"
  "crypto/rsa.GenerateMultiPrimeKey" -> "(*math/big.Int).Mul"
  "crypto/rsa.GenerateMultiPrimeKey" -> "(*math/big.Int).Sub"
  "crypto/rsa.GenerateMultiPrimeKey" -> "(*math/big.Int).Mul"
  "crypto/rsa.GenerateMultiPrimeKey" -> "(*math/big.Int).BitLen"
  "crypto/rsa.GenerateMultiPrimeKey" -> "math/big.NewInt"
  "crypto/rsa.GenerateMultiPrimeKey" -> "(*math/big.Int).ModInverse"
  "crypto/rsa.GenerateMultiPrimeKey" -> "(*crypto/rsa.PrivateKey).Precompute"
  "crypto/rsa.GenerateKey" -> "crypto/rsa.GenerateMultiPrimeKey"
  "github.com/quapka/go-analysis/rsa_ecc_operations/rsa-decryption.main" -> "crypto/rsa.GenerateKey"
  "github.com/quapka/go-analysis/rsa_ecc_operations/rsa-decryption.main" -> "crypto/rsa.DecryptPKCS1v15SessionKey"
}
